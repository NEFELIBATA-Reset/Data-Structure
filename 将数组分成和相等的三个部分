/*
给定一个整数数组 A，只有我们可以将其划分为三个和相等的非空部分时才返回 true，否则返回 false。

形式上，如果我们可以找出索引 i+1 < j 且满足 (A[0] + A[1] + ... + A[i] == A[i+1] + A[i+2] + ... + A[j-1] == A[j] + A[j-1] + ... + A[A.length - 1]) 就可以将数组三等分。


示例 1：

输出：[0,2,1,-6,6,-7,9,1,2,0,1]
输出：true
解释：0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1
示例 2：

输入：[0,2,1,-6,6,7,9,-1,2,0,1]
输出：false

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/partition-array-into-three-parts-with-equal-sum
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。



思路：
题目中要求分为和相等的三个部分，所以先把总和求出来除以3，之后遍历数组，一直相加，直到与三分之一总和相等，
给计数器加一，只要之后计数器等于三，则返回ture,否则false
*/
class Solution {
    public boolean canThreePartsEqualSum(int[] A) {
        int sum=0;
        for(int i=0;i<A.length;i++){
            sum+=A[i];
        }
        int res=sum/3;
        int count=0;
        sum=0;
        for(int i=0;i<A.length;i++){
            sum+=A[i];
            if(sum==res){
                count++;
                sum=0;
            }
        }
        if(count==3){
            return true;
        }
        return false;
    }
}
