

import java.util.Arrays;

public class Test {
    public static void main(String[] args) {
        int[] a={9,2,5,4,3,6,7,8,1};
        //堆排序
        heapSort(a);
        System.out.println(Arrays.toString(a));
    }
    //堆排序
    public static void heapSort(int[] arr){
        int start=(arr.length-1)/2;//找到倒数第一个非叶子节点
        //从倒数第一个非叶子节点遍历，开始构建大根堆
        for(int i=start;i>=0;i--){
            maxHeap(arr,arr.length,i);
        }
        //将构建好的大根堆的根节点与最后一个节点调换，然后继续调整大根堆
        for(int i=arr.length-1;i>=0;i--){
            int temp=arr[0];
            arr[0]=arr[i];
            arr[i]=temp;
            maxHeap(arr,i,0);
        }

    }
    //构建大根堆
    public static void maxHeap(int[] arr,int size,int index){
        int leftNode=2*index+1;//节点的左节点
        int rightNode=2*index+2;//节点的右节点
        int max=index;//要构建的大根堆的根节点
        //找到最大的节点
        //左节点大于根节点的情况
        if(leftNode<size&&arr[leftNode]>arr[max]){
            max=leftNode;
        }
        //右节点大于根节点的情况
        if(rightNode<size&&arr[rightNode]>arr[max]){
            max=rightNode;
        }
        //将最大的节点与根节点调换
        if(max!=index){
            int temp=arr[index];
            arr[index]=arr[max];
            arr[max]=temp;
            maxHeap(arr,size,max);//给小于根节点的那个节点构建大根堆（确保他是大根堆）
        }
    }
